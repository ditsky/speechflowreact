{"version":3,"sources":["trace.pdf","logo.svg","MyPdfViewer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyPdfViewer","state","onDocumentComplete","pages","_this","setState","page","handlePrevious","handleNext","renderPagination","previousButton","react_default","a","createElement","className","onClick","href","nextButton","pagination","this","index_es","file","trace","React","Component","App","src_MyPdfViewer","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","startApp","ReactDOM","render","src_App_0","document","getElementById","cordova"],"mappings":"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","file":"static/js/main.ef1bc457.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trace.90bdb843.pdf\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PDF from 'react-pdf-js';\r\n//import test from './test.pdf';\r\nimport trace from './trace.pdf';\r\n\r\nclass MyPdfViewer extends React.Component {\r\n  state = {};\r\n\r\n  onDocumentComplete = (pages) => {\r\n    this.setState({ page: 1, pages });\r\n  }\r\n\r\n  handlePrevious = () => {\r\n    this.setState({ page: this.state.page - 1 });\r\n  }\r\n\r\n  handleNext = () => {\r\n    this.setState({ page: this.state.page + 1 });\r\n  }\r\n\r\n  renderPagination = (page, pages) => {\r\n    let previousButton = <li className=\"previous\" onClick={this.handlePrevious}><a href=\"#\"><i className=\"fa fa-arrow-left\"></i> Previous</a></li>;\r\n    if (page === 1) {\r\n      previousButton = <li className=\"previous disabled\"><a href=\"#\"><i className=\"fa fa-arrow-left\"></i> Previous</a></li>;\r\n    }\r\n    let nextButton = <li className=\"next\" onClick={this.handleNext}><a href=\"#\">Next <i className=\"fa fa-arrow-right\"></i></a></li>;\r\n    if (page === pages) {\r\n      nextButton = <li className=\"next disabled\"><a href=\"#\">Next <i className=\"fa fa-arrow-right\"></i></a></li>;\r\n    }\r\n    return (\r\n      <nav>\r\n        <ul className=\"pager\">\r\n          {previousButton}\r\n          {nextButton}\r\n        </ul>\r\n      </nav>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    let pagination = null;\r\n    if (this.state.pages) {\r\n      pagination = this.renderPagination(this.state.page, this.state.pages);\r\n    }\r\n    return (\r\n      <div>\r\n        <PDF\r\n          file={trace}\r\n          onDocumentComplete={this.onDocumentComplete}\r\n          page={this.state.page}\r\n        />\r\n        {pagination}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyPdfViewer;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import Pdf from './Pdf.js';\nimport MyPdfViewer from './MyPdfViewer.js';\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n        <MyPdfViewer />\n    </div>\n);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n  serviceWorker.register();\n};\n\nif(window.cordova) {\n  document.addEventListener('deviceready', startApp, false);\n} else {\n  startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}